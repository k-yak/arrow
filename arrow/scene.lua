-- This file is for use with Gideros Framework
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			require "box2d"
--			local world = b2.World.new(0, 9.8)			
--			local body = world:createBody{type = b2.DYNAMIC_BODY}
--			local scaleFactor = 1.0
--			local physics = (loadfile "PhysicsData.lua")().physicsData(scaleFactor)			
--			physics:addFixture(body, objectname)
--

local M = {}

function M.physicsData(scale)
	local physics = {  data =
	{ 
		
		["sfondo3"] = { 
		    		anchorPoint = { 0.000, 1.000}, fixtures = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = 1000, friction = 100, restitution = 0, sensor=false, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   71, -137  ,  71, -38  ,  -137, 90  ,  -138, -137  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 1000, friction = 100, restitution = 0, sensor=false, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -137, 90  ,  71, -38  ,  139, -38  ,  139, 102  }
                    }
                    
                    
                    
                     ,
                    
                    
                    {
                    pe_fixture_id = "", density = 1000, friction = 100, restitution = 0, sensor=false, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   212, -185  ,  212, -162  ,  142, -162  ,  142, -185  }
                    }
                    
                    
                    
                     ,
                    
                    
                    {
                    pe_fixture_id = "", density = 1000, friction = 100, restitution = 0, sensor=false, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   0, -251  ,  -76, -464  ,  70, -323  ,  70, -251  }
                    }
                    
                    
                    
                     ,
                    
                    
                    {
                    pe_fixture_id = "", density = 1000, friction = 100, restitution = 0, sensor=false, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   411, -250  ,  411, -320  ,  480, -319  ,  481, -249  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 1000, friction = 100, restitution = 0, sensor=false, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   480, -319  ,  411, -320  ,  549, -453  }
                    }
                    
                    
                    
                     ,
                    
                    
                    {
                    pe_fixture_id = "", density = 1000, friction = 100, restitution = 0, sensor=false, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   659, 107  ,  409, -36  ,  409, -141  ,  659, -140  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 1000, friction = 100, restitution = 0, sensor=false, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   409, -36  ,  659, 107  ,  212, 106  ,  212, -37  }
                    }
                    
                    
                    
			}
		}
		
		, 
		["debugArcher"] = { 
		    		anchorPoint = { 0.000, 1.000}, fixtures = {
                    
			}
		}
		
		, 
		["FrioArcher"] = { 
		    		anchorPoint = { 0.026, 0.037}, fixtures = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = 200, friction = 400, restitution = 0, sensor=false, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -16.41, -2.50000492000004  ,  -9.41, -29.50000492  ,  10.59, -24.50000492  ,  21.59, -4.50000492000004  ,  11.59, 19.49999508  ,  -10.41, 19.49999508  }
                    }
                    
                    
                    
			}
		}
		
		, 
		["arrow"] = { 
		    		anchorPoint = { 0.682, 0.506}, fixtures = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = -100, friction = 10, restitution = 0, sensor=false, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   1.9, 2.7  ,  1.9, -1.3  ,  2.9, -2.3  ,  7.9, 0.699999999999999  }
                    }
                    
                    
                    
			}
		}
		
		, 
		["item"] = { 
		    		anchorPoint = { 0.493, 0.522}, fixtures = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = 200, friction = 400, restitution = 0, sensor=false, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   14.2000001, -16.8  ,  14.2000001, 14.2  ,  -12.7999999, 14.2  ,  -12.7999999, -16.8  }
                    }
                    
                    
                    
			}
		}
		
	} }

        -- apply scale factor
        local s = scale or 1.0
        for bi,body in pairs(physics.data) do
                for fi,fixture in ipairs(body) do
                    if(fixture.shape) then
                        for ci,coordinate in ipairs(fixture.shape) do
                            fixture.shape[ci] = s * coordinate
                        end
                    else
                        fixture.radius = s * fixture.radius
                    end
                end
        end
	
	-- add Fixtures to body
	function physics:addFixture(body, name)
		for fi,fixture in pairs(physics.data[name].fixtures) do
			local shape
			if(fixture.shape) then
				shape = b2.PolygonShape.new()
				shape:set(unpack(fixture.shape))			
			else
				shape = b2.CircleShape.new(fixture.center.x, fixture.center.y, fixture.radius)
			end
			body:createFixture{shape = shape, density = fixture.density, restitution = fixture.restitution, friction = fixture.friction, filter = fixture.filter, isSensor=fixture.sensor}
		end
	end

	-- get anchorpoint to specific body
	function physics:getAnchorPoint(name)
		return unpack(physics.data[name].anchorPoint)		
	end
	
	return physics;
end

return M

